#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps
	
### Constants

### Configure directories
BASE_DIR="$(pwd)"
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

### Load dependencies

# shellcheck source=util/common.sh
source "$BP_DIR/bin/util/common.sh"
# shellcheck source=util/apt_dpkg_install.sh
source "$BP_DIR/bin/util/apt_dpkg_install.sh" 

export_env_dir "$ENV_DIR"

### Local variable declaration
declare herokuos_version framework_version runtime_framework_version

# Get OS
herokuos_version="$(get_linux_platform_version)"

print "OS: Ubuntu $herokuos_version"
print "Stack version: ${STACK}"

# Get .net core framework version
framework_version="$(get_framework_version $BUILD_DIR)"
print "The .net core framework version: ${framework_version}"

print "Installing prerequisites for .NET Core on Ubuntu"
if [[ $herokuos_version == "16.04" ]]; then
	apt_install libicu55 openssl1.0
elif [[ $herokuos_version == "18.04" ]]; then
	apt_install libicu60 openssl1.0
elif [[ $herokuos_version == "19.04" ]]; then
	apt_install libicu63 libssl1.1
elif [[ $herokuos_version == "20.04" ]]; then
   	apt_install libicu66 libssl1.1
fi

runtime_framework_version="$(get_runtime_framework_version $BUILD_DIR)"
print "The dotnet sdk version: ${runtime_framework_version} to be installed"

# Skip TELEMETRY_OPTOUT on production environment
export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=${DOTNET_SKIP_FIRST_TIME_EXPERIENCE:-1}
export DOTNET_CLI_TELEMETRY_OPTOUT=${DOTNET_CLI_TELEMETRY_OPTOUT:-1}
export ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-production}

# dotnet installation
$BP_DIR/bin/util/dotnet-install.sh --channel $framework_version --version $runtime_framework_version --install-dir $BUILD_DIR/.dotnet

# Add symbolic link for dotnet
if [[ $BUILD_DIR != '/app' ]]; then
	# Subsequent buildpacks can still invoke it
	ln -s ${BUILD_DIR}/.dotnet $HOME
fi

# Add dotnet runtime path to environment variable that is available to access dotnet command
export PATH="$PATH:$HOME/.dotnet"

## List installed dotnet runtimes
#dotnet --list-runtimes

PROFILE_PATH="$BUILD_DIR/.profile.d/dotnetcore.sh"
mkdir -p $(dirname $PROFILE_PATH)

# Export vars
echo 'export PATH="$PATH:$HOME/.dotnet:$HOME/.apt/usr/bin"' >> $PROFILE_PATH
echo 'export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$HOME/.apt/usr/lib/x86_64-linux-gnu:$HOME/.apt/usr/lib/i386-linux-gnu:$HOME/.apt/usr/lib"' >> $PROFILE_PATH
echo 'export LIBRARY_PATH="$LIBRARY_PATH:$HOME/.apt/usr/lib/x86_64-linux-gnu:$HOME/.apt/usr/lib/i386-linux-gnu:$HOME/.apt/usr/lib"' >> $PROFILE_PATH
echo 'export INCLUDE_PATH="$INCLUDE_PATH:$HOME/.apt/usr/include"' >> $PROFILE_PATH
echo 'export CPATH="$INCLUDE_PATH"' >> $PROFILE_PATH
echo 'export CPPPATH="$INCLUDE_PATH"' >> $PROFILE_PATH
echo "export DOTNET_CLI_TELEMETRY_OPTOUT=1" >> $PROFILE_PATH
#echo "export IS_POSTGRES_USED=\"$(is_postgres_used $BUILD_DIR)\"" >> $PROFILE_PATH

# Get project file from build directory
PROJECT_FILE="$(get_project_file $BUILD_DIR)"

# Get app assembly name from project file
APP_ASSEMBLY="$(get_project_name $BUILD_DIR)"
echo "export APP_ASSEMBLY=\"$(get_project_name $BUILD_DIR)\"" >> $PROFILE_PATH

cd $BUILD_DIR
RELEASE_DIR="${APP_ASSEMBLY}_Release"

# https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-publish?tabs=netcore21
# dotnet publish [<PROJECT>]
dotnet publish $PROJECT_FILE --output $BUILD_DIR/$RELEASE_DIR --configuration Release --runtime linux-x64

# Remove src files in production machine
find -maxdepth 1 ! -name .profile.d ! -name .apt ! -name .dotnet ! -name .heroku ! -name node_modules ! -name $RELEASE_DIR  -exec rm -rv {} \; > /dev/null 2>&1;

# Create procfile and Add process type to that 
cat << EOT >> ${BUILD_DIR}/Procfile
web: cd \$HOME/$RELEASE_DIR && ASPNETCORE_URLS='http://+:\$PORT' dotnet "./$APP_ASSEMBLY.dll" --urls http://+:\$PORT
EOT
